[%

// If the root EPackage has a @constraints(file="foo.evl")
// annotation, parse the constraints into an EVL module
var module = getValidationModule();

// Compute the set of classes to be shown in this diagram
var main = getMainClass();
var classes = getVisibleClasses();

%]
digraph G {
	graph[splines=ortho, nodesep=0.6]
	node[fontname=Tahoma, fontsize=10, shape=record]
	edge[fontname=Tahoma, fontsize=10, arrowsize=0.7]
	
	[%for (c in classes) { %]
		[** Create a node for the class **]
		[%=c.getNodeName()%][shape=none, margin=0, label = <[%=c.getLabel()%]>]
		
		[%if ((main.isDefined() and c == main) or main.isUndefined()){%]
			
			[** Create nodes for all the constraints of the class*]
			[%if (constraintsVisible() and module.constraintContexts.exists(ctx|ctx.typeName=c.name)){%]
				[%=c.getNodeName()%]_Constraints[shape=none, margin=0, label=<[%=c.getConstraintsLabel()%]>]
				[%=c.getNodeName()%]_Constraints->[%=c.getNodeName()%][arrowhead=none, style=dashed, name="[%=c.getNodeName()%]_Constraints"]
				{rank=same;[%=c.getNodeName()%]_Constraints;[%=c.getNodeName()%]}
			[%}%]
			
			[** Create node for all the documentation annotations of the class*]
			[%if (isLayerActive("documentation")){%]
			[%var documentation = c.getAnnotationValue("http://www.eclipse.org/emf/2002/GenModel", "documentation");%]
			[%if (documentation.isDefined()){%]
				[%=c.getNodeName()%]_Documentation[shape="note", label="[%=documentation.toMultiline()%]", style="filled", fillcolor="azure"]
				[%=c.getNodeName()%]_Documentation->[%=c.getNodeName()%][arrowhead=none, style=dashed, name="[%=c.getNodeName()%]_Documentation"];
			[%}%]
			[%}%]
			
			[** Create edges for the supertypes of the class **]
			[%if (isLayerActive("supertypes")){%]
			[%for (s in c.eSuperTypes.select(s|classes.includes(s))){%]
				[%=s.getNodeName()%]->[%=c.getNodeName()%][name="[%=s.getNodeName()%]-isSuperTypeOf-[%=c.getNodeName()%]", arrowtail="empty", dir="back", arrowsize=0.9]
			[%}%]
			[%}%]
			
			[** ... and for its subtypes **]
			[%if (isLayerActive("subtypes") and main.isDefined()){%]
			[%for (s in classes.select(cl|cl.eSuperTypes.includes(c))){%]
				[%=c.getNodeName()%]->[%=s.getNodeName()%][name="[%=c.getNodeName()%]-isSuperTypeOf-[%=s.getNodeName()%]", arrowtail="empty", dir="back", arrowsize=0.9]
			[%}%]
			
			[%}%]
			
		[%}%]
	[%}%]
	
	[* ... and for its references *]
	[%if (isLayerActive("referenceLabels")){%] [* ... if reference labels layers is active*]
		[%for (r in getUnidirectionalReferences()) {%]
			[%var c = r.eContainer;%]
			[%=r.getNodeName()%][label="[%=r.name%]", shape=plaintext, margin=0,width=0,height=0]
			[%if (r.containment){%]
				[%=c.getNodeName()%]->[%=r.getNodeName()%][arrowtail=[%=r.getArrowTail()%],tooltip="[%=r.name%]",name="[%=r.getIdentifier()%]_headFragment", dir=back];
				[%=r.getNodeName()%]->[%=r.eType.getNodeName()%][name="[%=r.getIdentifier()%]_tailFragment"]
			[%}else{%]
				[%=c.getNodeName()%]->[%=r.getNodeName()%][arrowhead=none, name="[%=r.getIdentifier()%]_headFragment"]
				[%=r.getNodeName()%]->[%=r.eType.getNodeName()%][arrowhead=[%=r.getArrowHead()%],tooltip="[%=r.name%]",name="[%=r.getIdentifier()%]_tailFragment"];
				[%if (not r.containment){%]{rank=same; [%=c.getNodeName()%]; [%=r.getNodeName()%]; [%=r.eType.getNodeName()%]}[%}%]
			[%}%]
		[%}%]
		[%for (r in getBidirectionalReferences()) {%]
			[%var c = r.eContainer;%]
			[%=r.getNodeName()%][label="[%=r.name%]/\n[%=r.eOpposite.name%]", shape=plaintext, margin=0,width=0,height=0]
			[%=c.getNodeName()%]->[%=r.getNodeName()%][arrowhead=[%=r.getArrowTail()%],tooltip="[%=r.name%]",name="[%=r.getIdentifier()%]", dir=back];
			[%=r.getNodeName()%]->[%=r.eType.getNodeName()%][arrowtail=[%=r.getArrowHead()%],tooltip="[%=r.name%]",name="[%=r.getIdentifier()%]"];
			[%if (not r.containment){%]{rank=same; [%=c.getNodeName()%]; [%=r.getNodeName()%]; [%=r.eType.getNodeName()%]}[%}%]
		[%}%]
	[%}else{%] [* ... if reference labels layers is inactive*]
		[%for (r in getUnidirectionalReferences()) {%]
			[%var c = r.eContainer;%]
			[%if (r.containment){%]
				[%=c.getNodeName()%]->[%=r.eType.getNodeName()%][arrowtail=[%=r.getArrowTail()%],tooltip="[%=r.name%]",name="[%=r.getIdentifier()%]", dir=back];
			[%}else{%]
				[%=c.getNodeName()%]->[%=r.eType.getNodeName()%][arrowhead=[%=r.getArrowHead()%],tooltip="[%=r.name%]",name="[%=r.getIdentifier()%]"];
				{rank=same; [%=c.getNodeName()%]; [%=r.eType.getNodeName()%]}
			[%}%]
		[%}%]
		[%for (r in getBidirectionalReferences()) {%]
			[%var c = r.eContainer;%]
			[%=c.getNodeName()%]->[%=r.eType.getNodeName()%][arrowtail=[%=r.getArrowHead()%],arrowhead=[%=r.getArrowTail()%],tooltip="[%=r.name%]",name="[%=r.getIdentifier()%]", dir=both];
		[%}%]
		[%for (r in getVisibleReferences()){%]
		[%if (not r.containment){%]{rank=same; [%=r.eContainer.getNodeName()%]; [%=r.eType.getNodeName()%]}[%}%]
		[%}%] 
	[%}%]
	
}

[%

operation EClass getLabel() {
	var fillcolor = "fffcdc"; if (self==main) fillcolor="c8f0a1";
	var label = "<table cellspacing='0' cellborder='0' cellpadding='1' bgcolor='#" + fillcolor + "'>";
	var features = self.eAllStructuralFeatures;
	
	if (not isLayerActive("inherited")) features = self.eStructuralFeatures;
	if (not isLayerActive("derived")) features = features.reject(f|f.isDerived);
	
	if (self.eSuperTypes.includes(main)) features = features.excludingAll(main.eAllStructuralFeatures);
	
	var javascript = "javascript:top.showView('/Model/Classes/" + self.name + "')";
	var tooltip = "Show class diagram for " + self.name;
	if (self==main) {
		javascript = "javascript:top.showElement('" + self.id + "','" + self.eResource.uri + "')";
		tooltip = "Go to " + self.name + " in the Ecore editor";
	}
	
	label += "<tr><td sides='B' colspan='2' border='1'>" + 
		"<table border='0' cellspacing='0' cellborder='0' cellpading='0'>" + 
		"<tr><td align='right' valign='middle'><img src='" + self.getIcon()+ "'></img></td>" + 
		"<td align='left' valign='middle' href=\""+javascript+"\" tooltip='" + tooltip + "'>" + self.name + "</td></tr></table></td></tr>";
	
	label += "<tr><td></td><td></td></tr>";
	
	for (f in features.sortBy(f|f.name.toLowerCase())) {
		label += "<tr>";
		label += "<td><img src='" + f.getIcon() + "'></img></td><td align='left'>" + f.getLabel(self) + "</td>";
		label += "</tr>";
	}
	
	if (features.isEmpty()){
		label += "<tr>";
		label += "<td> </td><td> </td>";
		label += "</tr>";
	}
	
	label += "</table>";
	return label;
}

operation EClass getConstraintsLabel() {
	var label = "<table border='1' cellspacing='0' cellborder='0' cellpadding='4'>";
	for (constraint in 
		module.constraintContexts.select(ctx|ctx.typeName=self.name).
			collect(ctx|ctx.constraints).flatten()) {
		
		label+="<tr><td bgcolor='" + constraint.getConstraintColour() + "'>" + constraint.getConstraintLabel() + "</td></tr>";
	
	}
	label += "</table>";
	return label;
}

operation EStructuralFeature getLabel(eClass : EClass) {
	var label = self.name;
	if (self.isDerived()) label = "/" + label;
	if (self.eType.isDefined()) label += " : " + self.eType.name;
	if (self.isMany) label += "["+"*"+"]";
	label += "  ";
	if (eClass == main and self.eContainer() == eClass) label = "<font color='blue'>" + label + "</font>";
	if (self.isTypeOf(EReference)) {
		// add href here
	}
	return label; 
}

operation EOperation getLabel() {
	var label = self.name + "(" + self.eParameters.collect(p|p.getLabel()).concat(", ") + ")";
	if (self.eType.isDefined()) {
		label += " : " + self.eType.name;
		if (self.isMany) {
			label += "["+"*"+"]";
		}
	}
	return label;
}

operation EReference getArrowHead() {
	if (self.eOpposite.isDefined() and self.eOpposite.containment) {
		return "diamond";
	}
	return "open";
}

operation EReference getArrowTail() {
	if (self.containment) {
		return "diamond";
	}
	else {
		if (self.eOpposite.isDefined()) {
			return "open";
		}
		else {
			return "none";
		}
	}
	
}

operation EReference getIdentifier() {
	return self.eContainingClass.name + "_" + self.name;
}

operation Any getConstraintLabel() {
	var label = "";
	if (isLayerActive("constraintNames")) label += self.name;
	if (self.comments.notEmpty() and isLayerActive("constraintDescriptions")) {
		if (isLayerActive("constraintNames")) label += ": ";
		label += self.comments.first();
	}
	return "<table cellspacing='0' border='0' cellpadding='0'><tr><td align='left'>" + 
		label.toMultiline("</td></tr><tr><td align='left'>") +
		"</td></tr></table>";
}

operation Any getConstraintColour() {
	if (self.isCritique()) return "khaki1";
	else return "mistyrose";
}

operation getVisibleClasses() {
	var main = getMainClass();
	if (main.isDefined()) {
		var classes : OrderedSet;
		classes.add(main);
		if (isLayerActive("supertypes")) classes.addAll(main.eSuperTypes); // All its supertypes
		if (isLayerActive("subtypes")) classes.addAll(EClass.all.select(o|o.eSuperTypes.includes(main))); // All its subtypes
		classes.addAll(getVisibleReferences().eType);
		return classes;
	}
	else {
		return EClass.all.select(c|classNames.includes(c.name));
	}
}

operation getMainClass() {
	if (mainClassName.isDefined()) {
		return EClass.all.selectOne(c|c.name = mainClassName);
	}
}

operation getUnidirectionalReferences() {
	var bidirectionalReferences = getBidirectionalReferences();
	return getVisibleReferences().excludingAll(bidirectionalReferences).
		excludingAll(bidirectionalReferences.eOpposite);
}

operation getBidirectionalReferences() {
	var references = getVisibleReferences();
	return references.select(r|r.eOpposite.isDefined() and references.indexOf(r) < references.indexOf(r.eOpposite));
}

operation getVisibleReferences() {
	var visibleReferences : OrderedSet;
	var main = getMainClass();
	if (main.isDefined()){
		visibleReferences.addAll(main.eReferences);
		visibleReferences.addAll(main.eReferences.eOpposite);
		visibleReferences.remove(null);
	}
	else {
		visibleReferences.addAll(classes.eReferences.flatten().select(r|classes.includes(r.eType)));
	} 
	visibleReferences = visibleReferences.reject(r|r.eType = r.eContainer);
	if (not isLayerActive("derived")) visibleReferences = visibleReferences.reject(r|r.isDerived);
	return visibleReferences;
}

operation getValidationModule() {
	var module = new Native("org.eclipse.epsilon.evl.EvlModule");
	var constraints = EPackage.all.first().getAnnotationValue("constraints", "file");
	if (not constraints.isDefined()) return module;
	
	var constraintsUrl = new Native("java.net.URL")(new Native("java.net.URL")(M.resource.uri.toString()), constraints);
	module.parse(constraintsUrl.toURI());
	return module;
}

operation EModelElement getAnnotationValue(name : String, detail : String) : Any {
	var ann = self.eAnnotations.selectOne(a|a.source = name);
	var det;

	if (ann.isDefined()) {
		det = ann.details.selectOne(d|d.key = detail);
	}

	if (det.isDefined()) {
		return det.value;
	}
	
	return det;	
}

operation String toMultiline() : String {
	return self.toMultiline("\\l");
}

operation String toMultiline(newline : String) : String {
	var multiline = "";
	
	for (line in self.split("\\n")) {
		var length = 0;
		for (part in line.split(" ")) {
			multiline += part + " ";
			if (length > 30) {
				multiline += newline;
				length = 0;
			}
			else {
				length += part.length();
			}
		}
		if (not multiline.endsWith(newline)) multiline += newline;
		if (hasMore) multiline += "\\n";
	}
	if (not multiline.endsWith(newline)) multiline += newline;
	
	multiline = multiline.replaceAll('"', '\\\\"');
	
	return multiline;
}

operation EClass getNodeName() {
	return "_" + self.name;
}

operation EReference getNodeName() {
	return "_" + self.eContainer.name + "_" + self.name;
}

operation isLayerActive(id : String) {
	var layer = layers.selectOne(l|l.id = id);
	if (layer.isDefined()) {
		return layer.active;
	}
	else {
		return true;
	}
}

operation Any getIcon() {
	return getImage("icons/" + self.eClass.name + ".gif");
}

operation constraintsVisible() {
	return isLayerActive("constraintNames") or isLayerActive("constraintDescriptions");
}

%]

