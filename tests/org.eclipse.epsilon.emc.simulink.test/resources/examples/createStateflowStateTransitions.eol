var chart = new `sflib/Chart`;
assert(Chart.all.size() = 1);  
chart.name 	= "Chart";
assert(chart.name = "Chart");
chart.position = "[200 100 230 130]";
chart.position.println;
//assert(chart.position = "[200 100 230 130]");

var sA = new `Stateflow.State`(chart);
assert(State.all.size() = 1);
sA.Name  = "A";
assert(sA.Name  = "A");
sA.position = "[50 50 310 200]";
//assert(sA.position = "[50 50 310 200]");

var sA1 = new `Stateflow.State`;
chart.add(sA1);
assert(State.all.size() = 2);
sA1.Name = "A1";
assert(sA1.Name = "A1");
sA1.position = "[80 120 90 60]";
//assert(sA1.position = "[80 120 90 60]");

var sA2 = new `Stateflow.State`(chart);
assert(State.all.size() = 3);
sA2.Name = "A2";
assert(sA2.Name = "A2");
sA2.position = "[240 120 90 60]";
//assert(sA2.position = "[240 120 90 60]");

var tA1A2 = new `Stateflow.Transition`;
chart.add(tA1A2);
assert(Transition.all.size() = 1);
tA1A2.source = sA1; 
//assert(tA1A2.source = sA1);
tA1A2.destination = sA2; 
//assert(tA1A2.destination = sA2);
tA1A2.sourceOClock = 3;
//assert(tA1A2.sourceOClock = 3);
tA1A2.destinationOClock = 9;
//assert(tA1A2.destinationOClock = 9);

tA1A2.labelPosition = "[180 140 0 0]";
//assert(tA1A2.labelPosition = "[180 140 0 0]");
tA1A2.labelString = "E1";
assert(tA1A2.labelString = "E1");

var E1 = new `Stateflow.Event`(chart);
assert(Event.all.size() = 1);
E1.name = 'E1';
assert(E1.name = 'E1');

var pos = tA1A2.LabelPosition;
pos.set(0, pos.at(0) + 5);
//assert();
tA1A2.LabelPosition = "[" + pos.concat(" ") + "]";
//assert();

var dtA = new `Stateflow.Transition`(chart);
assert(Transition.all.size() = 2);
dtA.destination = sA;
//assert(dtA.destination = sA);
dtA.destinationOClock = 0;
//assert(dtA.destinationOClock = 0);
var xsource = sA.Position.at(0) + sA.Position.at(2)/2;
var ysource = sA.Position.at(1) - 30;
dtA.SourceEndPoint = "[" + xsource + " " + ysource +"]";
//assert();
dtA.MidPoint = "[" + xsource + " " + ysource + 15 +"]";
//assert();

var dtA1 = new `Stateflow.Transition`(chart);
assert(Transition.all.size() = 3);
dtA1.destination = sA1;
//assert(dtA1.destination = sA1);
dtA1.destinationOClock = 0;
//assert(dtA1.destinationOClock = 0);
var xsource = sA1.Position.at(0) + sA1.Position.at(2)/2;
var ysource = sA1.Position.at(1) - 30;
dtA1.sourceEndPoint = "[" + xsource + " " + ysource +"]";
//assert();
dtA1.midPoint = "[" + xsource + " " + ysource + 15 +"]";
//assert();