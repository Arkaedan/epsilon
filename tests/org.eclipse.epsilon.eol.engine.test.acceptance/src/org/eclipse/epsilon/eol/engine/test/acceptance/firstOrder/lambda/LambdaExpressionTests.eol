var rand = new Native("java.util.Random");
var IntStream = Native("java.util.stream.IntStream");
var Collectors = Native("java.util.stream.Collectors");

@test
operation testStreamLambda() {
	var doubleOfFirstEvenNumberGT10 = IntStream
		.range(0, 10)
		.filter(i | i.mod(2) == 0)
		.map(i | i * 2)
		.filter(i : Integer | i > 10)
		.boxed()
		.sorted(o1, o2 | o1.compareTo(o2))
		.findFirst()
		.orElseGet(null | gobbledegook);
	
	assertEquals(12, doubleOfFirstEvenNumberGT10);
}

@test
operation testStreamCollect() {
	assertEquals(Sequence{0..10},
		IntStream.range(0, 20)
		.filter(i | i <= 10)
		.boxed()
		.collect(Collectors.toList())
	);
}

/*@test
operation testHeterogenousDoubleParameters() {
	var seed = 1;
	var powerOfTwo = IntStream
		.iterate(seed, i | i * 2)	//uh-oh, doesn't work!
		.limit(10)
		.filter(i | i == 512)
		.findAny()
		.orElse(null);
	
	assertEquals(512, powerOfTwo);
}*/

@test
operation testParameterless() {
	assertEquals(1, IntStream
		.range(1, 10)
		.findFirst()
		.orElseGet( | rand.nextInt(10) - 20)
	);
}

@test
operation testConsumer() {
	Sequence{0..1}.forEach(i | i.println());
}

@test
operation testSupplier() {
	assertEquals(16, Native("java.util.stream.DoubleStream")
		.generate(_| rand.nextDouble())
		.limit(16l)
		.count()
	);
}

@test
operation testStreamIsLazy() {
	assertEquals(-1,
		IntStream.range(0, 2048)
		.filter(i | i.mod(1336) == 0)
		.map(i | i * 2)
		.filter(i | i > 10 and i < 1337)
		.filter(i | lazyTest(i))
		.findAny()
		.orElse(-1)
	);
}

operation lazyTest(i) : Boolean {
	throw "Shouldn't be here!";
}
