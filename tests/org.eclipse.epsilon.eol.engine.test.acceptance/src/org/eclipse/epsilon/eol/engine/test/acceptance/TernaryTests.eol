@test
operation simpleAssignment() {
	var result = 1 > 2 ? "t" : "f";
	assertEquals("f", result);
	result = true ? false else true;
	assertFalse(result);
}

@test
operation inExpression() {
	assertTrue((((2+2==4) and 4-1==3) ? "quick mafs" : null).isDefined());
}

@test
operation nestedAssignment() {
	var result = 10 <= 1 ? null else (300 > 300000 ? "madness" : "SPARTA!!");
	assertEquals("SPARTA!!", result);
}

@test
operation reassignToSelf() {
	var value = "status quo";
	value = -(1/12) > 2147483647 ? "revolution" : value;
	assertEquals("status quo", value);
	value = value.isUndefined() ? value : "revolution";
	assertEquals("revolution", value);
}

@test
operation assertLazy() {
	var b = false;
	var result = b ? neverCalled() : "Yes".getResult();
	assertEquals(1, result);
}

operation String getResult() : Integer {
	return 1;
}

operation neverCalled() {
	throw true ? "Shouldn't be here!" : "Something has gone catastrophically wrong if you're seeing this in the stack trace";
}